# Generic .travis.yml file for running continuous integration on Travis-CI for
# any ROS package.
#
# Available here:
#   - http://felixduvallet.github.io/ros-travis-integration
#   - https://github.com/felixduvallet/ros-travis-integration
#
# This installs ROS on a clean Travis-CI virtual machine, creates a ROS
# workspace, resolves all listed dependencies, and sets environment variables
# (setup.bash). Then, it compiles the entire ROS workspace (ensuring there are
# no compilation errors), and runs all the tests. If any of the compilation/test
# phases fail, the build is marked as a failure.
#
# We handle two types of package dependencies specified in the package manifest:
#   - system dependencies that can be installed using `rosdep`, including other
#     ROS packages and system libraries. These dependencies must be known to
#     `rosdistro` and get installed using apt-get.
#   - package dependencies that must be checked out from source. These are handled by
#     `wstool`, and should be listed in a file named dependencies.rosinstall.
#
# There are two variables you may want to change:
#   - ROS_DISTRO (default is indigo). Note that packages must be available for
#     ubuntu 14.04 trusty.
#   - ROSINSTALL_FILE (default is dependencies.rosinstall inside the repo
#     root). This should list all necessary repositories in wstool format (see
#     the ros wiki). If the file does not exists then nothing happens.
#
# See the README.md for more information.
#
# Author: Felix Duvallet <felixd@gmail.com>

# NOTE: The build lifecycle on Travis.ci is something like this:
#    before_install
#    install
#    before_script
#    script
#    after_success or after_failure
#    after_script
#    OPTIONAL before_deploy
#    OPTIONAL deploy
#    OPTIONAL after_deploy

################################################################################

# Use ubuntu trusty (14.04) with sudo privileges.
dist: trusty
sudo: required
language:
  - generic
cache:
  - apt

# Configuration variables. All variables are global now, but this can be used to
# trigger a build matrix for different ROS distributions if desired.
env:
  global:
    - ROS_DISTRO=indigo
    - ROS_CI_DESKTOP="`lsb_release -cs`"  # e.g. [precise|trusty|...]
    - CI_SOURCE_PATH=$(pwd)
    - CATKIN_OPTIONS=$CI_SOURCE_PATH/catkin.options
    - ROS_PARALLEL_JOBS='-j8 -l6'
#- ROSINSTALL_FILE=$CI_SOURCE_PATH/dependencies.rosinstall

################################################################################

# Install system dependencies, namely a very barebones ROS setup.
before_install:
  - sudo sh -c "echo \"deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main\" > /etc/apt/sources.list.d/ros-latest.list"
  - wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
  # Do not build/test costar-perception: it requires OpenCV-nonfree, which is not automatically installed.
  - touch $CI_SOURCE_PATH/costar_perception/CATKIN_IGNORE
  - sudo apt-get update -qq
  - sudo apt-get install -y python-catkin-pkg python-rosdep python-wstool python-catkin-tools ros-$ROS_DISTRO-catkin
  # - sudo apt-get install -y ros-$ROS_DISTRO-fcl ros-$ROS_DISTRO-soem ros-$ROS_DISTRO-moveit-full liburdfdom-headers-dev ros-$ROS_DISTRO-control-msgs ros-$ROS_DISTRO-gazebo-ros-control ros-$ROS_DISTRO-python-orocos-kdl xdot ros-$ROS_DISTRO-ros-control ros-$ROS_DISTRO-universal-robot ros-$ROS_DISTRO-ur-msgs ros-$ROS_DISTRO-octomap-msgs ros-$ROS_DISTRO-object-recognition-msgs ros-$ROS_DISTRO-realtime-tools ros-$ROS_DISTRO-soem ros-$ROS_DISTRO-gazebo-plugins ros-$ROS_DISTRO-pcl-ros ros-$ROS_DISTRO-socketcan-interface ros-$ROS_DISTRO-rqt-gui ros-$ROS_DISTRO-rqt-gui-py ros-$ROS_DISTRO-position-controllers ros-$ROS_DISTRO-robot-state-publisher ros-$ROS_DISTRO-joint-state-controller ros-$ROS_DISTRO-robot-state-publisher ros-$ROS_DISTRO-joint-trajectory-controller ros-$ROS_DISTRO-openni2-launch
  - source /opt/ros/$ROS_DISTRO/setup.bash
  # Prepare rosdep to install dependencies.
  - sudo rosdep init
  - rosdep update

# Create a catkin workspace with the package under integration.
install:
  - mkdir -p ~/costar_ws/src
  - cd ~/costar_ws
  - catkin init
  - cd ~/costar_ws/src
  - git clone https://github.com/SalvoVirga/iiwa_stack.git  
  - git clone https://github.com/ros-industrial/robotiq.git  
  - git clone https://github.com/jbohren/rqt_dot.git  
  - git clone https://github.com/sniekum/ar_track_alvar.git  
  - git clone https://github.com/sniekum/ar_track_alvar_msgs.git  
  - git clone https://github.com/gt-ros-pkg/hrl-kdl.git  
  - git clone https://github.com/cpaxton/xdot.git  
  - git clone https://github.com/ThomasTimm/ur_modern_driver.git
  # Create the devel/setup.bash (run catkin_make with an empty workspace) and
  # source it to set the path variables.
  - cd ~/costar_ws
  # Install remaining dependencies using rosdep
  - rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO
  - catkin build
  - source devel/setup.bash
  # Add the package under integration to the workspace using a symlink.
  - cd ~/costar_ws/src
  - ln -s $CI_SOURCE_PATH .

# Install all dependencies, using wstool first and rosdep second.
# wstool looks for a ROSINSTALL_FILE defined in the environment variables.
before_script:
  # source dependencies: install using wstool.
  - cd ~/costar_ws/src
  #- wstool init
  #- if [[ -f $ROSINSTALL_FILE ]] ; then wstool merge $ROSINSTALL_FILE ; fi
  #- wstool up
  # package depdencies: install using rosdep.
  - cd ~/costar_ws
  - rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO

# Compile and test (mark the build as failed if any step fails). If the
# CATKIN_OPTIONS file exists, use it as an argument to catkin_make, for example
# to blacklist certain packages.
#
# NOTE on testing: `catkin_make run_tests` will show the output of the tests
# (gtest, nosetest, etc..) but always returns 0 (success) even if a test
# fails. Running `catkin_test_results` aggregates all the results and returns
# non-zero when a test fails (which notifies Travis the build failed).
script:
  - source /opt/ros/$ROS_DISTRO/setup.bash
  - cd ~/costar_ws
  - catkin build
  # Run the tests, ensuring the path is set correctly.
  - source devel/setup.bash
  #- catkin_make run_tests && catkin_test_results
  # run a test: make sure we can bring up the robot successfully
  #- python2.7 $CI_SOURCE_PATH/costar_bringup/tests/iiwa_test.py
