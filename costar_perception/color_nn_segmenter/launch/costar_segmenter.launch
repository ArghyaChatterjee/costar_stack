<launch>
  <arg name="node_namespace"           default="costar_perception" />

  <!-- Load model settings -->
  <arg name="load_existing_model"      default="true" doc="Loads the color model saved specified in the model path. If set to false, model training will be done before color segmentation is performed."/>
  <arg name="model_directory"          default="$(find color_nn_segmenter)/models" doc="Directory that contains the model data."/>
  <arg name="model_name"               default="rgby_wood_block" doc="The name of the model to be loaded/saved."/>
  <arg name="background_labels"        default="wood_block" doc="Names of excluded labels, separated with comma. Points with these color label will be removed from the labelled cloud."/>
  <arg name="foreground_labels"        default="red_block,blue_block" doc="Names of foreground labels, separated with comma."/>

  <!-- Training settings -->
  <arg name="training_data_directory"  default="$(find color_nn_segmenter)/training_data" doc="Location of the training data that contains color category folders to be trained"/>
  <arg name="kmeans_point_per_model"   default="1" doc="The number of kmeans points per color category"/>
  <arg name="save_new_model"           default="true" />
  <arg name="save_directory"           default="$(find color_nn_segmenter)/models" doc="Target directory for saving the new model"/>

  <!-- Ros topic settings -->
  <arg name="send_label_as_rgb"        default="true" doc="Send the color label index as the red channel in the rgb point cloud"/>
  <arg name="cloud_input_topic"        default="/camera/depth_registered/points" doc="Name of the point cloud topic to be segmented"/>
  <arg name="segmented_cloud_topic"    default="seg_label_cloud" doc="Name of the topic to publish segmented cloud that contains PointXYZL"/>
  <arg name="visualized_cloud_topic"   default="visualized_cloud_topic" doc="Name of the topic to publish segmented cloud in rviz-compatible point cloud"/>
  <arg name="segmentation_done_topic"  default="segment_done" doc="The name of a topic that sends an Empty message everytime color segmentation has been done." />

  <!-- Table segmentation settings -->
  <arg name="use_plane_segmentation"   default="true" />
  <arg name="load_table"               default="true"/>
  <arg name="update_table"             default="true" />
  <arg name="load_table_path"          default="$(find object_on_table_segmenter)/data/table.pcd" />
  <arg name="table_tf"                 default="ar_marker_2" />
  <arg name="use_tf_surface"           default="false" />
  <arg name="table_distance_threshold" default="0.01" />
  <arg name="table_angular_threshold"  default="2" />
  <arg name="table_minimal_inliers"    default="7500" />
  <arg name="use_rosbag"               default="false" />
  <arg name="above_table_min"          default="0.01" />
  <arg name="above_table_max"          default="0.5" />
  <arg name="plane_seg_viewer"         value="false"  doc="Display the result of table plane segmentation" />

  <include file="$(find object_on_table_segmenter)/launch/table_seg_params.launch">
    <arg name="namespace"                value="$(arg node_namespace)" />
    <arg name="load_table"               value="$(arg load_table)" />
    <arg name="update_table"             value="$(arg update_table)" />
    <arg name="load_table_path"          value="$(arg load_table_path)" />
    <arg name="table_tf"                 value="$(arg table_tf)" />
    <arg name="use_tf_surface"           value="$(arg use_tf_surface)" />
    <arg name="table_distance_threshold" value="$(arg table_distance_threshold)" />
    <arg name="table_angular_threshold"  value="$(arg table_angular_threshold)" />
    <arg name="table_minimal_inliers"    value="$(arg table_minimal_inliers)" />
    <arg name="use_rosbag"               value="$(arg use_rosbag)" />
    <arg name="above_table_min"          value="$(arg above_table_min)" />
    <arg name="above_table_max"          value="$(arg above_table_max)" />
    <arg name="plane_seg_viewer"         value="$(arg plane_seg_viewer)" />
  </include>
 
  <node pkg="color_nn_segmenter" type="pcl_color_segmenter" name="$(arg node_namespace)" output="screen"
    >  
    <!-- arg pass -->
    <param name="load_existing_model"       type="bool"  value="$(arg load_existing_model)" />
    <param name="model_directory"           type="str"   value="$(arg model_directory)" />
    <param name="model_name"                type="str"   value="$(arg model_name)" />
    <param name="training_data_directory"   type="str"   value="$(arg training_data_directory)" />
    <param name="kmeans_point_per_model"    type="int"   value="$(arg kmeans_point_per_model)" />
    <param name="save_new_model"            type="bool"  value="$(arg save_new_model)" />
    <param name="save_directory"            type="str"   value="$(arg save_directory)" />
    <param name="cloud_input_topic"         type="str"   value="$(arg cloud_input_topic)" />
    <param name="segmented_cloud_topic"     type="str"   value="$(arg segmented_cloud_topic)" />
    <param name="visualized_cloud_topic"    type="str"   value="$(arg visualized_cloud_topic)" />
    <param name="segmentation_done_topic"   type="str"   value="$(arg segmentation_done_topic)" />

    <param name="use_plane_segmentation"    type="bool"  value="$(arg use_plane_segmentation)" />

    <param name="background_labels"         type="str"   value="$(arg background_labels)" />
    <param name="foreground_labels"         type="str"   value="$(arg foreground_labels)" />
    
    <param name="send_label_as_rgb"         type="bool"  value="$(arg send_label_as_rgb)" />
  </node>

</launch>