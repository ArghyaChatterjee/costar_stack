<launch>

  <arg name="output" default="screen"/>
  <arg name="publish_values" default="0"/>

  <!-- detected objects node -->
  <node pkg="predicator_detected_objects" name="predicator_detected_objects_node" type="detected_objects_node.py">
    <remap from="/detected_object_list" to="/SPServer/detected_object_list"/>
  </node>

  <!-- geometry node -->
  <node name="predicator_geometry_node"
    type="predicator_geometry_node.py"
    pkg="predicator_geometry"
    output="$(arg output)">

    <param name="height_threshold" value="0.1"/>
    <param name="rel_x_threshold" value="0.1"/>
    <param name="rel_y_threshold" value="0.1"/>
    <param name="rel_z_threshold" value="0.1"/>
    <param name="near_2D_threshold" value="0.2"/>
    <param name="near_3D_threshold" value="0.25"/>
    <param name="publish_values" value="$(arg publish_values)"/>

    <rosparam param="frames">
      - Obj::link_uniform::1
      - Obj::link_uniform::2
      - Obj::link_uniform::3
      - Obj::link_uniform::4
      - Obj::node_uniform::1
      - Obj::node_uniform::2
      - Obj::node_uniform::3
      - Obj::node_uniform::4
      - ar_marker_0
      - ar_marker_1
      - world
    </rosparam>

    <rosparam param="reference_frames">
      - world
    </rosparam>

  </node>

  <node pkg="predicator_landmark" name="predicator_landmark_service" type="get_waypoints_service.py"/>

  <node name="predicator_fake_class_node"
    type="fake_classes.py"
    pkg="predicator_fake_classification"
    output="$(arg output)">

    <rosparam param="class_info">
      - name: obj_class
        members:
          - drill
          - link
          - node
    </rosparam>

  </node>
</launch>
